{"version":3,"sources":["bootstrap-node.js"],"names":["exports","injectNodeModuleLookupPath","injectPath","Error","Module","require","nodeModulesPath","join","__dirname","originalResolveLookupPaths","_resolveLookupPaths","moduleName","parent","paths","Array","isArray","i","len","length","splice","removeGlobalNodeModuleLookupPaths","globalPaths","commonSuffixLength","slice"],"mappings":";;;;AAMA,aAOAA,QAAQC,2BAA6B,SAAUC,GAC9C,IAAKA,EACJ,MAAM,IAAIC,MAAM,sBAGjB,MAAMC,EAASC,QAAQ,UAGjBC,EAFOD,QAAQ,QAEQE,KAAKC,UAAW,mBAGvCC,EAA6BL,EAAOM,oBAG1CN,EAAOM,oBAAsB,SAAUC,EAAYC,GAClD,MAAMC,EAAQJ,EAA2BE,EAAYC,GACrD,GAAIE,MAAMC,QAAQF,GACjB,IAAK,IAAIG,EAAI,EAAGC,EAAMJ,EAAMK,OAAQF,EAAIC,EAAKD,IAC5C,GAAIH,EAAMG,KAAOV,EAAiB,CACjCO,EAAMM,OAAOH,EAAG,EAAGd,GACnB,MAKH,OAAOW,IAITb,QAAQoB,kCAAoC,WAC3C,MAAMhB,EAASC,QAAQ,UAEjBgB,EAAcjB,EAAOiB,YAGrBZ,EAA6BL,EAAOM,oBAG1CN,EAAOM,oBAAsB,SAAUC,EAAYC,GAClD,MAAMC,EAAQJ,EAA2BE,EAAYC,GACrD,IAAIU,EAAqB,EACzB,KAAOA,EAAqBT,EAAMK,QAAUL,EAAMA,EAAMK,OAAS,EAAII,KAAwBD,EAAYA,EAAYH,OAAS,EAAII,IACjIA,IAED,OAAOT,EAAMU,MAAM,EAAGV,EAAMK,OAASI","file":"bootstrap-node.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n/**\n * Add support for redirecting the loading of node modules\n *\n * @param {string} injectPath\n */\nexports.injectNodeModuleLookupPath = function (injectPath) {\n\tif (!injectPath) {\n\t\tthrow new Error('Missing injectPath');\n\t}\n\n\tconst Module = require('module');\n\tconst path = require('path');\n\n\tconst nodeModulesPath = path.join(__dirname, '../node_modules');\n\n\t// @ts-ignore\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t// @ts-ignore\n\tModule._resolveLookupPaths = function (moduleName, parent) {\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\n\t\tif (Array.isArray(paths)) {\n\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\tif (paths[i] === nodeModulesPath) {\n\t\t\t\t\tpaths.splice(i, 0, injectPath);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t};\n};\n\nexports.removeGlobalNodeModuleLookupPaths = function () {\n\tconst Module = require('module');\n\t// @ts-ignore\n\tconst globalPaths = Module.globalPaths;\n\n\t// @ts-ignore\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t// @ts-ignore\n\tModule._resolveLookupPaths = function (moduleName, parent) {\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\n\t\tlet commonSuffixLength = 0;\n\t\twhile (commonSuffixLength < paths.length && paths[paths.length - 1 - commonSuffixLength] === globalPaths[globalPaths.length - 1 - commonSuffixLength]) {\n\t\t\tcommonSuffixLength++;\n\t\t}\n\t\treturn paths.slice(0, paths.length - commonSuffixLength);\n\t};\n};\n"]}