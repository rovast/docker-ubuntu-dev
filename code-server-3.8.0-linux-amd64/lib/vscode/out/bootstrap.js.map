{"version":3,"sources":["bootstrap.js"],"names":["globalThis","factory","exports","module","MonacoBootstrap","this","Module","require","undefined","path","fs","Error","stackTraceLimit","process","on","console","error","enableASARSupport","appRoot","warn","NODE_MODULES_PATH","join","platform","__dirname","substr","NODE_MODULES_ASAR_PATH","originalResolveLookupPaths","_resolveLookupPaths","request","parent","paths","Array","isArray","i","len","length","splice","avoidMonkeyPatchFromAppInsights","env","global","configurePortable","product","dirname","getApplicationPath","portableDataPath","portableDataName","portable","applicationName","getPortableDataPath","isPortable","existsSync","portableTempPath","isTempPortable","setupNLS","nlsConfig","availableLanguages","JSON","parse","e","_resolvedLanguagePackCoreLocation","bundles","Object","create","loadBundle","bundle","language","cb","result","bundleFile","replace","promises","readFile","then","content","json","catch","_corruptedFile","writeFile","fileUriFromPath","config","uri","pathName","charAt","isWindows","startsWith","encodeURI","scheme","fallbackAuthority"],"mappings":"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","file":"bootstrap.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// Simple module style to support node.js and browser environments\n(function (globalThis, factory) {\n\n\t// Node.js\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\n\t// Browser\n\telse {\n\t\tglobalThis.MonacoBootstrap = factory();\n\t}\n}(this, function () {\n\tconst Module = typeof require === 'function' ? require('module') : undefined;\n\tconst path = typeof require === 'function' ? require('path') : undefined;\n\tconst fs = typeof require === 'function' ? require('fs') : undefined;\n\n\t//#region global bootstrapping\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tif (typeof process !== 'undefined') {\n\t\tprocess.on('SIGPIPE', () => {\n\t\t\tconsole.error(new Error('Unexpected SIGPIPE'));\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region Add support for using node_modules.asar\n\n\t/**\n\t * @param {string} appRoot\n\t */\n\tfunction enableASARSupport(appRoot) {\n\t\tif (!path || !Module) {\n\t\t\tconsole.warn('enableASARSupport() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\tlet NODE_MODULES_PATH = appRoot ? path.join(appRoot, 'node_modules') : undefined;\n\t\tif (!NODE_MODULES_PATH) {\n\t\t\tNODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t\t} else {\n\t\t\t// use the drive letter casing of __dirname\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tNODE_MODULES_PATH = __dirname.substr(0, 1) + NODE_MODULES_PATH.substr(1);\n\t\t\t}\n\t\t}\n\n\t\tconst NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\n\t\t// @ts-ignore\n\t\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t\t// @ts-ignore\n\t\tModule._resolveLookupPaths = function (request, parent) {\n\t\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn paths;\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region URI helpers\n\n\t/**\n\t * @param {string} path\n\t * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(path, config) {\n\n\t\t// Since we are building a URI, we normalize any backlsash\n\t\t// to slashes and we ensure that the path begins with a '/'.\n\t\tlet pathName = path.replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\n\t\t// Windows: in order to support UNC paths (which start with '//')\n\t\t// that have their own authority, we do not use the provided authority\n\t\t// but rather preserve it.\n\t\tif (config.isWindows && pathName.startsWith('//')) {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t\t}\n\n\t\t// Otherwise we optionally add the provided authority if specified\n\t\telse {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t//#endregion\n\n\n\t//#region NLS helpers\n\n\t/**\n\t * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean }}\n\t */\n\tfunction setupNLS() {\n\t\tif (!path || !fs) {\n\t\t\tconsole.warn('setupNLS() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the nls configuration into the process.env as early as possible.\n\t\tlet nlsConfig = { availableLanguages: {} };\n\t\tif (process.env['VSCODE_NLS_CONFIG']) {\n\t\t\ttry {\n\t\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\t\tconst bundles = Object.create(null);\n\n\t\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\t\tconst result = bundles[bundle];\n\t\t\t\tif (result) {\n\t\t\t\t\tcb(undefined, result);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst bundleFile = path.join(nlsConfig._resolvedLanguagePackCoreLocation, `${bundle.replace(/\\//g, '!')}.nls.json`);\n\t\t\t\tfs.promises.readFile(bundleFile, 'utf8').then(function (content) {\n\t\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\t\tcb(undefined, json);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\t\tfs.promises.writeFile(nlsConfig._corruptedFile, 'corrupted', 'utf8').catch(function (error) { console.error(error); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcb(error, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn nlsConfig;\n\t}\n\n\t//#endregion\n\n\n\t//#region Portable helpers\n\n\t/**\n\t * @param {{ portable: string; applicationName: string; }} product\n\t * @returns {{ portableDataPath: string; isPortable: boolean; }}\n\t */\n\tfunction configurePortable(product) {\n\t\tif (!path || !fs) {\n\t\t\tconsole.warn('configurePortable() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\tconst appRoot = path.dirname(__dirname);\n\n\t\tfunction getApplicationPath() {\n\t\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t\treturn appRoot;\n\t\t\t}\n\n\t\t\tif (process.platform === 'darwin') {\n\t\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\n\t\t\t}\n\n\t\t\treturn path.dirname(path.dirname(appRoot));\n\t\t}\n\n\t\tfunction getPortableDataPath() {\n\t\t\tif (process.env['VSCODE_PORTABLE']) {\n\t\t\t\treturn process.env['VSCODE_PORTABLE'];\n\t\t\t}\n\n\t\t\tif (process.platform === 'win32' || process.platform === 'linux') {\n\t\t\t\treturn path.join(getApplicationPath(), 'data');\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\n\t\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\n\t\t}\n\n\t\tconst portableDataPath = getPortableDataPath();\n\t\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\n\t\tconst portableTempPath = path.join(portableDataPath, 'tmp');\n\t\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\n\n\t\tif (isPortable) {\n\t\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\n\t\t} else {\n\t\t\tdelete process.env['VSCODE_PORTABLE'];\n\t\t}\n\n\t\tif (isTempPortable) {\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tprocess.env['TMP'] = portableTempPath;\n\t\t\t\tprocess.env['TEMP'] = portableTempPath;\n\t\t\t} else {\n\t\t\t\tprocess.env['TMPDIR'] = portableTempPath;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tportableDataPath,\n\t\t\tisPortable\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region ApplicationInsights\n\n\t// Prevents appinsights from monkey patching modules.\n\t// This should be called before importing the applicationinsights module\n\tfunction avoidMonkeyPatchFromAppInsights() {\n\t\tif (typeof process === 'undefined') {\n\t\t\tconsole.warn('avoidMonkeyPatchFromAppInsights() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true; // Skip monkey patching of 3rd party modules by appinsights\n\t\tglobal['diagnosticsSource'] = {}; // Prevents diagnostic channel (which patches \"require\") from initializing entirely\n\t}\n\n\t//#endregion\n\n\n\treturn {\n\t\tenableASARSupport,\n\t\tavoidMonkeyPatchFromAppInsights,\n\t\tconfigurePortable,\n\t\tsetupNLS,\n\t\tfileUriFromPath\n\t};\n}));\n"]}