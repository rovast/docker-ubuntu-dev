{"version":3,"sources":["vs/base/common/performance.js"],"names":["_factory","sharedObj","MonacoPerformanceMarks","_dataLen","_timeStamp","console","timeStamp","bind","mark","name","push","Date","now","getEntries","result","entries","i","length","startTime","getDuration","from","to","target","endIndex","importEntries","splice","exportEntries","slice","global","self","define","module","exports","perf"],"mappings":";;;;AAKA,aAIA,SAASA,SAASC,GAEjBA,EAAUC,uBAAyBD,EAAUC,wBAA0B,GAEvE,MAAMC,EAAW,EACXC,EAA0C,mBAAtBC,QAAQC,UAA2BD,QAAQC,UAAUC,KAAKF,SAAW,OAsD/F,MARgB,CACfG,KAND,SAAcC,GACbR,EAAUC,uBAAuBQ,KAAKD,EAAME,KAAKC,OACjDR,EAAWK,IAKXI,WAtCD,WACC,MAAMC,EAAS,GACTC,EAAUd,EAAUC,uBAC1B,IAAK,IAAIc,EAAI,EAAGA,EAAID,EAAQE,OAAQD,GAAKb,EACxCW,EAAOJ,KAAK,CACXD,KAAMM,EAAQC,GACdE,UAAWH,EAAQC,EAAI,KAGzB,OAAOF,GA8BPK,YA3BD,SAAqBC,EAAMC,GAC1B,MAAMN,EAAUd,EAAUC,uBAC1B,IAAIoB,EAASD,EACTE,EAAW,EACf,IAAK,IAAIP,EAAID,EAAQE,OAASd,EAAUa,GAAK,EAAGA,GAAKb,EACpD,GAAIY,EAAQC,KAAOM,EAAQ,CAC1B,GAAIA,IAAWD,EAMd,OAAON,EAAQQ,EAAW,GAAKR,EAAQC,EAAI,GAJ3CO,EAAWP,EACXM,EAASF,EAOZ,OAAO,GAYPI,cAhDD,SAAuBT,GACtBd,EAAUC,uBAAuBuB,OAAO,EAAG,KAAMV,IAgDjDW,cA7CD,WACC,OAAOzB,EAAUC,uBAAuByB,MAAM,KAuDhD,IAAI1B,UAGHA,UAFqB,iBAAX2B,OAEEA,OACc,iBAATC,KAELA,KAEA,GAGS,mBAAXC,OAEVA,OAAO,IAAI,WAAc,OAAO9B,SAASC,cACb,iBAAX8B,QAAiD,iBAAnBA,OAAOC,QAEtDD,OAAOC,QAAUhC,SAASC,WAE1BA,UAAUgC,KAAOjC,SAASC","file":"performance.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n//@ts-check\n\nfunction _factory(sharedObj) {\n\n\tsharedObj.MonacoPerformanceMarks = sharedObj.MonacoPerformanceMarks || [];\n\n\tconst _dataLen = 2;\n\tconst _timeStamp = typeof console.timeStamp === 'function' ? console.timeStamp.bind(console) : () => { };\n\n\tfunction importEntries(entries) {\n\t\tsharedObj.MonacoPerformanceMarks.splice(0, 0, ...entries);\n\t}\n\n\tfunction exportEntries() {\n\t\treturn sharedObj.MonacoPerformanceMarks.slice(0);\n\t}\n\n\tfunction getEntries() {\n\t\tconst result = [];\n\t\tconst entries = sharedObj.MonacoPerformanceMarks;\n\t\tfor (let i = 0; i < entries.length; i += _dataLen) {\n\t\t\tresult.push({\n\t\t\t\tname: entries[i],\n\t\t\t\tstartTime: entries[i + 1],\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction getDuration(from, to) {\n\t\tconst entries = sharedObj.MonacoPerformanceMarks;\n\t\tlet target = to;\n\t\tlet endIndex = 0;\n\t\tfor (let i = entries.length - _dataLen; i >= 0; i -= _dataLen) {\n\t\t\tif (entries[i] === target) {\n\t\t\t\tif (target === to) {\n\t\t\t\t\t// found `to` (end of interval)\n\t\t\t\t\tendIndex = i;\n\t\t\t\t\ttarget = from;\n\t\t\t\t} else {\n\t\t\t\t\t// found `from` (start of interval)\n\t\t\t\t\treturn entries[endIndex + 1] - entries[i + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tfunction mark(name) {\n\t\tsharedObj.MonacoPerformanceMarks.push(name, Date.now());\n\t\t_timeStamp(name);\n\t}\n\n\tconst exports = {\n\t\tmark: mark,\n\t\tgetEntries: getEntries,\n\t\tgetDuration: getDuration,\n\t\timportEntries: importEntries,\n\t\texportEntries: exportEntries\n\t};\n\n\treturn exports;\n}\n\n// This module can be loaded in an amd and commonjs-context.\n// Because we want both instances to use the same perf-data\n// we store them globally\n\n// eslint-disable-next-line no-var\nvar sharedObj;\nif (typeof global === 'object') {\n\t// nodejs\n\tsharedObj = global;\n} else if (typeof self === 'object') {\n\t// browser\n\tsharedObj = self;\n} else {\n\tsharedObj = {};\n}\n\nif (typeof define === 'function') {\n\t// amd\n\tdefine([], function () { return _factory(sharedObj); });\n} else if (typeof module === 'object' && typeof module.exports === 'object') {\n\t// commonjs\n\tmodule.exports = _factory(sharedObj);\n} else {\n\tsharedObj.perf = _factory(sharedObj);\n}\n"]}