{"version":3,"sources":["vs/workbench/contrib/webview/browser/pre/host.js"],"names":["id","document","location","search","match","onElectron","test","hostMessaging","[object Object]","this","handlers","Map","window","addEventListener","e","data","command","postMessage","channel","handler","get","args","console","log","parent","target","set","fatalError","message","error","workerReady","Promise","async","resolveWorkerReady","navigator","serviceWorker","areServiceWorkersEnabled","register","then","ready","versionHandler","event","removeEventListener","version","registration","update","finally","active","forwardFromHostToWorker","onMessage","includes","host","bind","fakeLoad","rewriteCSP","csp","replace","endpoint","endpointUrl","URL","origin","createWebviewManager"],"mappings":";;;;CAKC,WACA,MAAMA,EAAKC,SAASC,SAASC,OAAOC,MAAM,iBAAiB,GACrDC,EAAa,oBAAoBC,KAAKL,SAASC,SAASC,QAExDI,EAAgB,IAAI,MACzBC,cACCC,KAAKC,SAAW,IAAIC,IACpBC,OAAOC,iBAAiB,UAAYC,IACnC,GAAIA,EAAEC,OAA4B,cAAnBD,EAAEC,KAAKC,SAA8C,oBAAnBF,EAAEC,KAAKC,SAGvD,YADAP,KAAKQ,YAAYH,EAAEC,KAAKC,QAASF,EAAEC,KAAKA,MAIzC,MAAMG,EAAUJ,EAAEC,KAAKG,QACjBC,EAAUV,KAAKC,SAASU,IAAIF,GAC9BC,EACHA,EAAQL,EAAGA,EAAEC,KAAKM,MAElBC,QAAQC,IAAI,kBAAmBT,KAKlCN,YAAYU,EAASH,GACpBH,OAAOY,OAAOP,YAAY,CAAEQ,OAAQzB,EAAIkB,QAAAA,EAASH,KAAAA,GAAQ,KAG1DP,UAAUU,EAASC,GAClBV,KAAKC,SAASgB,IAAIR,EAASC,KAI7B,SAASQ,EAAiCC,GACzCN,QAAQO,MAAM,wBAAwBD,KACtCrB,EAAcU,YAAY,cAAe,CAAEW,QAAAA,IAG5C,MAAME,EAAc,IAAIC,QAAQC,MAAOC,IACtC,GAAI5B,EACH,OAAO4B,IAGR,IAmDD,WACC,IACC,QAASC,UAAUC,cAClB,MAAOrB,GACR,OAAO,GAvDHsB,GAEJ,OADAT,EAAW,uEACJM,IAKRC,UAAUC,cAAcE,SAAS,qBAAqBC,KACrDN,MAAAA,UACOE,UAAUC,cAAcI,MAE9B,MAAMC,EAAkBC;AACvB,GAA2B,YAAvBA,EAAM1B,KAAKG,QAKf,OADAgB,UAAUC,cAAcO,oBAAoB,UAAWF,GAX5B,IAYvBC,EAAM1B,KAAK4B,QACPV,IAGAW,EAAaC,SAClBP,KAAK,IAAMJ,UAAUC,cAAcI,OACnCO,QAAQb,IAGZC,UAAUC,cAActB,iBAAiB,UAAW2B,GACpDI,EAAaG,OAAO9B,YAAY,CAAEC,QAAS,aAE5CW,IACCF,EAAW,uCAAuCE,MAClDI,MAGF,MAAMe,EAA2B9B,IAChCX,EAAc0C,UAAU/B,EAASuB,IAChCP,UAAUC,cAAcI,MAAMD,KAAKM,IAClCA,EAAaG,OAAO9B,YAAY,CAAEC,QAASA,EAASH,KAAM0B,EAAM1B,KAAKM,YAIxE2B,EAAwB,qBACxBA,EAAwB,sBAExBd,UAAUC,cAActB,iBAAiB,UAAW4B,IAC/C,CAAC,gBAAiB,kBAAkBS,SAAST,EAAM1B,KAAKG,UAC3DX,EAAcU,YAAYwB,EAAM1B,KAAKG,QAASuB,EAAM1B,UAcvD,MAAMoC,EAAO,CACZlC,YAAaV,EAAcU,YAAYmC,KAAK7C,GAC5C0C,UAAW1C,EAAc0C,UAAUG,KAAK7C,GACxCgC,MAAOT,EACPuB,UAAWhD,EACXA,WAAYA,EACZiD,WAAYjD,EACRkD,GACKA,EAAIC,QAAQ,gCAAiC,4BAEnD,CAACD,EAAKE,KACP,MAAMC,EAAc,IAAIC,IAAIF,GAC5B,OAAOF,EAAIC,QAAQ,0DAA2DE,EAAYE,UAI7F,OAA8BC,qBAAqBV,GAvHpD","file":"host.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// @ts-check\n(function () {\n\tconst id = document.location.search.match(/\\bid=([\\w-]+)/)[1];\n\tconst onElectron = /platform=electron/.test(document.location.search);\n\n\tconst hostMessaging = new class HostMessaging {\n\t\tconstructor() {\n\t\t\tthis.handlers = new Map();\n\t\t\twindow.addEventListener('message', (e) => {\n\t\t\t\tif (e.data && (e.data.command === 'onmessage' || e.data.command === 'do-update-state')) {\n\t\t\t\t\t// Came from inner iframe\n\t\t\t\t\tthis.postMessage(e.data.command, e.data.data);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst channel = e.data.channel;\n\t\t\t\tconst handler = this.handlers.get(channel);\n\t\t\t\tif (handler) {\n\t\t\t\t\thandler(e, e.data.args);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('no handler for ', e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpostMessage(channel, data) {\n\t\t\twindow.parent.postMessage({ target: id, channel, data }, '*');\n\t\t}\n\n\t\tonMessage(channel, handler) {\n\t\t\tthis.handlers.set(channel, handler);\n\t\t}\n\t}();\n\n\tfunction fatalError(/** @type {string} */ message) {\n\t\tconsole.error(`Webview fatal error: ${message}`);\n\t\thostMessaging.postMessage('fatal-error', { message });\n\t}\n\n\tconst workerReady = new Promise(async (resolveWorkerReady) => {\n\t\tif (onElectron) {\n\t\t\treturn resolveWorkerReady();\n\t\t}\n\n\t\tif (!areServiceWorkersEnabled()) {\n\t\t\tfatalError('Service Workers are not enabled in browser. Webviews will not work.');\n\t\t\treturn resolveWorkerReady();\n\t\t}\n\n\t\tconst expectedWorkerVersion = 1;\n\n\t\tnavigator.serviceWorker.register('service-worker.js').then(\n\t\t\tasync registration => {\n\t\t\t\tawait navigator.serviceWorker.ready;\n\n\t\t\t\tconst versionHandler = (event) => {\n\t\t\t\t\tif (event.data.channel !== 'version') {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tnavigator.serviceWorker.removeEventListener('message', versionHandler);\n\t\t\t\t\tif (event.data.version === expectedWorkerVersion) {\n\t\t\t\t\t\treturn resolveWorkerReady();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If we have the wrong version, try once to unregister and re-register\n\t\t\t\t\t\treturn registration.update()\n\t\t\t\t\t\t\t.then(() => navigator.serviceWorker.ready)\n\t\t\t\t\t\t\t.finally(resolveWorkerReady);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnavigator.serviceWorker.addEventListener('message', versionHandler);\n\t\t\t\tregistration.active.postMessage({ channel: 'version' });\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tfatalError(`Could not register service workers: ${error}.`);\n\t\t\t\tresolveWorkerReady();\n\t\t\t});\n\n\t\tconst forwardFromHostToWorker = (channel) => {\n\t\t\thostMessaging.onMessage(channel, event => {\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.active.postMessage({ channel: channel, data: event.data.args });\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\tforwardFromHostToWorker('did-load-resource');\n\t\tforwardFromHostToWorker('did-load-localhost');\n\n\t\tnavigator.serviceWorker.addEventListener('message', event => {\n\t\t\tif (['load-resource', 'load-localhost'].includes(event.data.channel)) {\n\t\t\t\thostMessaging.postMessage(event.data.channel, event.data);\n\t\t\t}\n\t\t});\n\t});\n\n\tfunction areServiceWorkersEnabled() {\n\t\ttry {\n\t\t\treturn !!navigator.serviceWorker;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/** @type {import('./main').WebviewHost} */\n\tconst host = {\n\t\tpostMessage: hostMessaging.postMessage.bind(hostMessaging),\n\t\tonMessage: hostMessaging.onMessage.bind(hostMessaging),\n\t\tready: workerReady,\n\t\tfakeLoad: !onElectron,\n\t\tonElectron: onElectron,\n\t\trewriteCSP: onElectron\n\t\t\t? (csp) => {\n\t\t\t\treturn csp.replace(/vscode-resource:(?=(\\s|;|$))/g, 'vscode-webview-resource:');\n\t\t\t}\n\t\t\t: (csp, endpoint) => {\n\t\t\t\tconst endpointUrl = new URL(endpoint);\n\t\t\t\treturn csp.replace(/(vscode-webview-resource|vscode-resource):(?=(\\s|;|$))/g, endpointUrl.origin);\n\t\t\t}\n\t};\n\n\t(/** @type {any} */ (window)).createWebviewManager(host);\n}());\n"]}