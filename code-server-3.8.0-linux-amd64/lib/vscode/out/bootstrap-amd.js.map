{"version":3,"sources":["bootstrap-amd.js"],"names":["loader","require","bootstrap","nlsConfig","setupNLS","config","baseUrl","fileUriFromPath","__dirname","isWindows","process","platform","catchError","nodeRequire","nodeMain","__filename","vs/nls","env","versions","define","originalFS","pseudo","nlsPlugin","setPseudoTranslation","exports","load","entrypoint","onLoad","onError","nodeCachedData","path","seed","err","console","error"],"mappings":";;;;AAMA,aAEA,MAAMA,OAASC,QAAQ,eACjBC,UAAYD,QAAQ,eAGpBE,UAAYD,UAAUE,WAG5BJ,OAAOK,OAAO,CACbC,QAASJ,UAAUK,gBAAgBC,UAAW,CAAEC,UAAgC,UAArBC,QAAQC,WACnEC,YAAY,EACZC,YAAaZ,QACba,SAAUC,WACVC,SAAUb,aAIPO,QAAQO,IAA0B,sBAAKP,QAAQQ,SAAmB,WACrElB,OAAOmB,OAAO,KAAM,CAAC,gBAAgB,SAAUC,GAC9C,OAAOA,KAKLjB,UAAUkB,QACbrB,OAAO,CAAC,WAAW,SAAUsB,GAC5BA,EAAUC,qBAAqBpB,UAAUkB,WAI3CG,QAAQC,KAAO,SAAUC,EAAYC,EAAQC,GACvCF,IAKDhB,QAAQO,IAAiC,6BAC5CjB,OAAOK,OAAO,CACbwB,eAAgB,CACfC,KAAMpB,QAAQO,IAAiC,4BAC/Cc,KAAML,KAQT1B,OAAO,CAAC0B,GAHRC,EAASA,GAAU,aACnBC,EAAUA,GAAW,SAAUI,GAAOC,QAAQC,MAAMF","file":"bootstrap-amd.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst loader = require('./vs/loader');\nconst bootstrap = require('./bootstrap');\n\n// Bootstrap: NLS\nconst nlsConfig = bootstrap.setupNLS();\n\n// Bootstrap: Loader\nloader.config({\n\tbaseUrl: bootstrap.fileUriFromPath(__dirname, { isWindows: process.platform === 'win32' }),\n\tcatchError: true,\n\tnodeRequire: require,\n\tnodeMain: __filename,\n\t'vs/nls': nlsConfig\n});\n\n// Running in Electron\nif (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\n\tloader.define('fs', ['original-fs'], function (originalFS) {\n\t\treturn originalFS;  // replace the patched electron fs with the original node fs for all AMD code\n\t});\n}\n\n// Pseudo NLS support\nif (nlsConfig.pseudo) {\n\tloader(['vs/nls'], function (nlsPlugin) {\n\t\tnlsPlugin.setPseudoTranslation(nlsConfig.pseudo);\n\t});\n}\n\nexports.load = function (entrypoint, onLoad, onError) {\n\tif (!entrypoint) {\n\t\treturn;\n\t}\n\n\t// cached data config\n\tif (process.env['VSCODE_NODE_CACHED_DATA_DIR']) {\n\t\tloader.config({\n\t\t\tnodeCachedData: {\n\t\t\t\tpath: process.env['VSCODE_NODE_CACHED_DATA_DIR'],\n\t\t\t\tseed: entrypoint\n\t\t\t}\n\t\t});\n\t}\n\n\tonLoad = onLoad || function () { };\n\tonError = onError || function (err) { console.error(err); };\n\n\tloader([entrypoint], onLoad, onError);\n};\n"]}